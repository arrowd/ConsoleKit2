<?xml version="1.0" encoding="UTF-8"?>
<node xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

  <interface name="org.freedesktop.login1.Session">
    <doc:doc>
      <doc:description>
        <doc:para>Session objects represent and store information
        related to a user session.
        </doc:para>
        <doc:para>The properties associated with the Session
        specifically refer to the properties of the "session leader".
        </doc:para>
      </doc:description>
    </doc:doc>

    <method name="Terminate">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
    </method>
    <method name="Activate">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>Attempt to activate the this session.  In most
          cases, if successful, this will cause the session to
          become visible and become active on the seat that it
          is attached to.</doc:para>
          <doc:para>May fail with: CK_SESSION_ERROR_ALREADY_ACTIVE, CK_SESSION_ERROR_NOT_SUPPORTED, CK_SESSION_ERROR_GENERAL</doc:para>
        </doc:description>
        <doc:seealso><doc:ref type="method" to="Seat.ActivateSession">Seat.ActivateSession()</doc:ref></doc:seealso>
      </doc:doc>
    </method>

    <method name="Lock">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>This will cause a <doc:ref type="signal" to="Session::Lock">Lock</doc:ref>
          signal to be emitted for this session.
          </doc:para>
        </doc:description>
        <doc:permission>This method is restricted to privileged users by D-Bus policy.</doc:permission>
        <doc:seealso><doc:ref type="signal" to="Session::Lock">Lock signal</doc:ref></doc:seealso>
      </doc:doc>
    </method>

    <method name="Unlock">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <doc:doc>
        <doc:description>
          <doc:para>This will cause an <doc:ref type="signal" to="Session::Unlock">Unlock</doc:ref>
          signal to be emitted for this session.
          </doc:para>
          <doc:para>This can be used by login managers to unlock a session before it is
          re-activated during fast-user-switching.
          </doc:para>
        </doc:description>
        <doc:permission>This method is restricted to privileged users by D-Bus policy.</doc:permission>
        <doc:seealso><doc:ref type="signal" to="Session::Unlock">Unlock signal</doc:ref></doc:seealso>
      </doc:doc>
    </method>

    <method name="SetIdleHint">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <arg name="idle_hint" type="b" direction="in">
        <doc:doc>
          <doc:summary>boolean value to set the idle-hint to</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>This may be used by the session to indicate that
          it is idle.
          </doc:para>
          <doc:para>Use of this method is restricted to the user
          that owns the session.</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="SetLockedHint">
      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
      <arg name="locked_hint" type="b" direction="in">
        <doc:doc>
          <doc:summary>boolean value to set the locked-hint to</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para> This is used by Desktop Environments to update the
          <doc:ref type="property" to="Session:LockedHint">LockedHint</doc:ref>
          property. Calling <doc:ref type="method" to="Session.Lock">Lock()</doc:ref>
          or <doc:ref type="method" to="Session.Unlock">Unlock()</doc:ref> will also
          update the <doc:ref type="property" to="Session:LockedHint">LockedHint</doc:ref>
          value.</doc:para>
          <doc:para>Use of this method is restricted to the user
          that owns the session.</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="Kill">
      <arg name="who" type="s" direction="in"/>
      <arg name="signal_number" type="i" direction="in"/>
    </method>

    <method name="TakeControl">
      <arg name="force" type="b" direction="in">
        <doc:doc>
          <doc:summary>If set to TRUE, an existing session controller is replaced.</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>Allows a single process per session to request ConsoleKit2
          managed devices by calling <doc:ref type="method" to="Session.TakeDevice">TakeDevice</doc:ref>.
          </doc:para>
          <doc:para>Use of this method is restricted to the user
          that owns the session or root. The force argument will be honored for
          root only.</doc:para>
          <doc:para>May fail with: CK_SESSION_ERROR_FAILED, CK_SESSION_ERROR_INSUFFICIENT_PERMISSION, CK_SESSION_ERROR_GENERAL, CK_SESSION_ERROR_NOT_SUPPORTED</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="ReleaseControl">
      <doc:doc>
        <doc:description>
          <doc:para>The process that previously successfully called
          <doc:ref type="method" to="Session.TakeControl">TakeControl</doc:ref>
          may use this to reliqunish control. Any devices acquired with
          <doc:ref type="method" to="Session.TakeDevice">TakeDevice</doc:ref>
          will be released. If the session controller closes the dbus-connection,
          this will implicitly call ReleaseControl.
          </doc:para>
          <doc:para>Use of this method is restricted to the process that
          called <doc:ref type="method" to="Session.TakeControl">TakeControl</doc:ref>.</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="SetType">
      <arg name="type" type="s" direction="in"/>
    </method>

    <method name="SetClass">
      <arg name="class" type="s" direction="in"/>
    </method>

    <method name="SetDisplay">
      <arg name="display" type="s" direction="in"/>
    </method>

    <method name="SetTTY">
      <arg name="tty_fd" type="h" direction="in"/>
    </method>

    <method name="TakeDevice">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="2"/>
      <arg name="major" type="u" direction="in">
        <doc:doc>
          <doc:summary>Major number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="minor" type="u" direction="in">
        <doc:doc>
          <doc:summary>Minor number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="fd" type="h" direction="out">
        <doc:doc>
            <doc:summary>Returns a file descriptor for the specified device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="inactive" type="b" direction="out">
        <doc:doc>
          <doc:summary>boolean value if the deivce is currently inactive.</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>ConsoleKit2 automatically mutes the file-descriptor if the
          session is inactive and resumes it once the session gets active again.
          This guarantees that a session can only access session-devices if the
          session is active. Note that this revoke/resume mechanism is asynchronous
          and may happen at any given time. This only works on devices that are
          attached to the seat of the given session. A process is not required
          to have direct access to the device-node. Also note that any device
          can only be requested once. As long as you don't release it, further
          calls will fail.
          </doc:para>
          <doc:para>Use of this method is restricted to the session-controller,
          see <doc:ref type="method" to="Session.TakeControl">TakeControl</doc:ref>.</doc:para>
          <doc:para>May fail with: CK_SESSION_ERROR_FAILED, CK_SESSION_ERROR_GENERAL, CK_SESSION_ERROR_NOT_SUPPORTED</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="ReleaseDevice">
      <arg name="major" type="u" direction="in">
        <doc:doc>
          <doc:summary>Major number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="minor" type="u" direction="in">
        <doc:doc>
          <doc:summary>Minor number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>Release a previously acquired device.
          </doc:para>
          <doc:para>Use of this method is restricted to the session-controller,
          see <doc:ref type="method" to="Session.TakeControl">TakeControl</doc:ref>.</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="PauseDeviceComplete">
      <arg name="major" type="u" direction="in">
        <doc:doc>
          <doc:summary>Major number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="minor" type="u" direction="in">
        <doc:doc>
          <doc:summary>Minor number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>Allows the session controller to synchronously pause a
          device in response to the
          <doc:ref type="signal" to="Session::PauseDevice">PauseDevice</doc:ref>
          signal. Forced signals are automatically completed by ConsoleKit2.
          </doc:para>
          <doc:para>Use of this method is restricted to the session-controller,
          see <doc:ref type="method" to="Session.TakeControl">TakeControl</doc:ref>.</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </method>

    <method name="SetBrightness">
      <arg name="subsystem" type="s" direction="in"/>
      <arg name="name" type="s" direction="in"/>
      <arg name="brightness" type="u" direction="in"/>
    </method>


    <signal name="PauseDevice">
      <arg name="major" type="u">
        <doc:doc>
          <doc:summary>Major number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="minor" type="u">
        <doc:doc>
          <doc:summary>Minor number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="type" type="s">
        <doc:doc>
          <doc:summary>Will either be: force, pause, or gone</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>Emitted for any device requested with
          <doc:ref type="method" to="Session.TakeDevice">TakeDevice</doc:ref>.
          A device may remain paused for unknown reasons even though the Session
          is active. A type of 'force' means the device got paused by ConsoleKit2
          already and this is only a notification. A type of 'pause' means
          ConsoleKit2 is requesting to pause the device and grants the session
          controller a limited amount of time to pause it. The session controller
          must respond to this via
          <doc:ref type="method" to="Session.PauseDeviceComplete">PauseDeviceComplete</doc:ref>.
          This synchronous pausing-mechanism is used for backwards-compatibility
          to VTs and ConsoleKit2 is free to not make use of it. ConsoleKit2 may
          also send a force PauseDevice if you don't respond in a timely manner
          (or for any other reason). A type of 'gone' means the device was unplugged from
          the system and you will no longer get any notifications about it.</doc:para>
          <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </signal>

    <signal name="ResumeDevice">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="2"/>
      <arg name="major" type="u">
        <doc:doc>
          <doc:summary>Major number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="minor" type="u">
        <doc:doc>
          <doc:summary>Minor number of the character-device.</doc:summary>
        </doc:doc>
      </arg>
      <arg name="fd" type="h">
        <doc:doc>
          <doc:summary>Will either be: force, pause, or gone</doc:summary>
        </doc:doc>
      </arg>
      <doc:doc>
        <doc:description>
          <doc:para>Emitted for any device requested with
          <doc:ref type="method" to="Session.TakeDevice">TakeDevice</doc:ref>.
           Sent whenever a session is active and a device is resumed.
           It carries the major/minor as arguments and provides a new open
           file-descriptor. You should switch to the new descriptor and close
           the old one. They are not guaranteed to have the same underlying
           file descriptor.</doc:para>
           <doc:para>Since 1.1.1</doc:para>
        </doc:description>
      </doc:doc>
    </signal>

    <signal name="Lock">
      <doc:doc>
        <doc:description>
          <doc:para>Emitted in response to a call to the <doc:ref type="method" to="Session.Lock">Lock()</doc:ref> method.</doc:para>
          <doc:para>It is intended that the screensaver for the session should lock the screen in response to this signal.</doc:para>
        </doc:description>
      </doc:doc>
    </signal>
    <signal name="Unlock">
      <doc:doc>
        <doc:description>
          <doc:para>Emitted in response to a call to the <doc:ref type="method" to="Session.Unlock">Unlock()</doc:ref> method.</doc:para>
          <doc:para>It is intended that the screensaver for the session should unlock the screen in response to this signal.</doc:para>
        </doc:description>
      </doc:doc>
    </signal>


    <property name="Id" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="User" type="(uo)" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Name" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Timestamp" type="t" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="TimestampMonotonic" type="t" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="VTNr" type="u" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Seat" type="(so)" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="TTY" type="s" access="read"/>

    <property name="Display" type="s" access="read"/>

    <property name="Remote" type="b" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="RemoteHost" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="RemoteUser" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Service" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Desktop" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Scope" type="s" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Leader" type="u" access="read">
      <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
    </property>

    <property name="Audit" type="u" access="read"/>

    <property name="Type" type="s" access="read"/>

    <property name="Class" type="s" access="read"/>

    <property name="Active" type="b" access="read"/>

    <property name="State" type="s" access="read"/>

    <property name="IdleHint" type="b" access="read"/>

    <property name="IdleSinceHint" type="t" access="read"/>

    <property name="IdleSinceHintMonotonic" type="t" access="read"/>

    <property name="LockedHint" type="b" access="read"/>

  </interface>
</node>
